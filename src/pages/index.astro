---
// src/pages/index.astro
import { collection, getDocs, limit, orderBy, query } from "firebase/firestore";
import ArticleCard from "../components/ArticleCard.astro";
import HeroSlideshowReact from "../components/HeroSlideshowReact";
import Sidebar from "../components/Sidebar.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import { db } from "../lib/firebase";
import { getBlogs, type Blog } from "../lib/microcms";

// ★★★ ヒーローセクションの人気記事取得ロジック ★★★
const viewsQuery = query(
  collection(db, "views"),
  orderBy("count", "desc"),
  limit(3)
);
const querySnapshot = await getDocs(viewsQuery);
const popularPostIds = querySnapshot.docs.map((doc) => doc.id);

let heroPosts: Blog[] = [];
if (popularPostIds.length > 0) {
  const filters = popularPostIds.map((id) => `id[equals]${id}`).join("[or]");
  const { contents: microCMSData } = await getBlogs({
    filters: filters,
  });
  // Firestoreの順序を維持
  heroPosts = popularPostIds
    .map((id) => {
      const post = microCMSData.find((post: Blog) => post.id === id);
      if (!post) return undefined;
      return {
        ...post,
        category: Array.isArray(post.category)
          ? [...post.category]
          : [post.category],
      };
    })
    .filter((post): post is Blog => !!post);
}

// ★★★ 新しい記事一覧の取得ロジック（ページネーション対応） ★★★
const PAGE_SIZE = 20;
const pageParam = Astro.url.searchParams.get("page");
const currentPage = pageParam ? Math.max(1, parseInt(pageParam)) : 1;
const offset = (currentPage - 1) * PAGE_SIZE;

// ★★★ 本番用：通常のページネーション・記事取得ロジックに戻す ★★★
const { contents: pagedPosts, totalCount } = await getBlogs({
  orders: "-publishedAt",
  limit: PAGE_SIZE,
  offset,
});
const totalPages = Math.ceil((totalCount || 0) / PAGE_SIZE);
---

<BaseLayout>
  <main class="min-h-screen bg-slate-900">
    {/* ★★★ ヒーローセクションをスライドショーに置き換え（React Island） ★★★ */}
    {
      heroPosts.length > 0 && (
        <div class="mb-8 md:mb-12">
          <HeroSlideshowReact client:load posts={heroPosts} />
        </div>
      )
    }

    <div class="container mx-auto px-6 py-8 md:py-12 max-w-7xl">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8 lg:gap-12">
        <div class="lg:col-span-3">
          <!-- New Articles -->
          <section>
            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-12 gap-6">
              <div class="flex items-center space-x-4">
                <div class="w-1.5 h-10 bg-gradient-to-b from-cyan-400 to-blue-500 rounded-full shadow-lg shadow-cyan-400/30"></div>
                <h2 class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-white via-cyan-100 to-blue-100 bg-clip-text text-transparent">Latest Articles</h2>
              </div>
              <div class="flex space-x-3">
                <button
                  id="view-grid"
                  title="グリッド表示"
                  aria-label="記事をグリッド形式で表示"
                  class="p-4 rounded-xl bg-slate-800/80 text-cyan-400 border border-slate-700/50 shadow-lg hover:bg-slate-700 hover:border-cyan-400 hover:shadow-cyan-400/20 focus:outline-none focus:ring-2 focus:ring-cyan-400/50 focus:ring-offset-2 focus:ring-offset-slate-900 transition-all duration-300 backdrop-blur-sm"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM13 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2h-2z"
                    ></path>
                  </svg>
                </button>
                <button
                  id="view-list"
                  title="リスト表示"
                  aria-label="記事をリスト形式で表示"
                  class="p-4 rounded-xl bg-slate-800/80 text-slate-400 border border-slate-700/50 shadow-lg hover:bg-slate-700 hover:text-cyan-400 hover:border-cyan-400 hover:shadow-cyan-400/20 focus:outline-none focus:ring-2 focus:ring-cyan-400/50 focus:ring-offset-2 focus:ring-offset-slate-900 transition-all duration-300 backdrop-blur-sm"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                      clip-rule="evenodd"></path>
                  </svg>
                </button>
              </div>
            </div>
            <div
              id="article-list-container"
              class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 md:gap-8"
            >
              {
                pagedPosts.map((post: Blog) => (
                  <ArticleCard
                    class="article-card"
                    id={post.id}
                    category={post.category}
                    title={post.title}
                    description={post.description}
                    date={
                      post.publishedAt
                        ? new Date(post.publishedAt).toLocaleDateString("ja-JP")
                        : ""
                    }
                    imageUrl={
                      post.eyecatch?.url
                        ? post.eyecatch.url + "?w=400&h=225&fit=crop"
                        : "/placeholder.svg"
                    }
                    imageUrlList={
                      post.eyecatch?.url
                        ? post.eyecatch.url + "?w=320&h=180&fit=crop"
                        : "/placeholder.svg"
                    }
                  />
                ))
              }
            </div>
            {/* ページネーション */}
            {totalPages > 1 && (
              <div class="mt-12 md:mt-16 flex justify-center">
                <nav class="flex items-center space-x-3">
                  {/* 前へ */}
                  <a
                    href={`?page=${currentPage - 1}`}
                    class={`flex items-center justify-center h-12 w-12 bg-slate-800 border border-slate-700 rounded-xl shadow-lg transition-all duration-300 ${currentPage === 1 ? 'text-slate-600 pointer-events-none' : 'text-slate-300 hover:bg-slate-700 hover:text-cyan-400 hover:border-cyan-400'}`}
                    aria-label="前のページへ"
                  >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
                  </a>
                  {/* ページ番号 */}
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) =>
                    page === currentPage ? (
                      <span
                        aria-current="page"
                        class="flex items-center justify-center h-12 w-12 bg-gradient-to-r from-cyan-500 to-blue-500 border border-cyan-400 text-white font-bold rounded-xl shadow-lg z-10"
                      >
                        {page}
                      </span>
                    ) : (
                      <a
                        href={`?page=${page}`}
                        class="flex items-center justify-center h-12 w-12 bg-slate-800 border border-slate-700 text-slate-300 rounded-xl shadow-lg hover:bg-slate-700 hover:text-cyan-400 hover:border-cyan-400 transition-all duration-300"
                      >
                        {page}
                      </a>
                    )
                  )}
                  {/* 次へ */}
                  <a
                    href={`?page=${currentPage + 1}`}
                    class={`flex items-center justify-center h-12 w-12 bg-slate-800 border border-slate-700 rounded-xl shadow-lg transition-all duration-300 ${currentPage === totalPages ? 'text-slate-600 pointer-events-none' : 'text-slate-300 hover:bg-slate-700 hover:text-cyan-400 hover:border-cyan-400'}`}
                    aria-label="次のページへ"
                  >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
                  </a>
                </nav>
              </div>
            )}
          </section>
        </div>
        <Sidebar />
      </div>
    </div>
  </main>
</BaseLayout>

<script>
  document.addEventListener("astro:page-load", () => {
    const gridButton = document.getElementById("view-grid");
    const listButton = document.getElementById("view-list");
    const container = document.getElementById("article-list-container");

    const updateButtonStyles = (view: "grid" | "list") => {
      const isGrid = view === "grid";
      
      // Grid button styles
      if (isGrid) {
        gridButton?.classList.remove("text-slate-400");
        gridButton?.classList.add("text-cyan-400", "border-cyan-400", "bg-slate-700");
      } else {
        gridButton?.classList.remove("text-cyan-400", "border-cyan-400", "bg-slate-700");
        gridButton?.classList.add("text-slate-400");
      }

      // List button styles
      if (!isGrid) {
        listButton?.classList.remove("text-slate-400");
        listButton?.classList.add("text-cyan-400", "border-cyan-400", "bg-slate-700");
      } else {
        listButton?.classList.remove("text-cyan-400", "border-cyan-400", "bg-slate-700");
        listButton?.classList.add("text-slate-400");
      }
    };

    const setView = (view: "grid" | "list") => {
      if (!container) return;
      const cards = container?.querySelectorAll(".article-card");

      // 既存のアニメーションクラスをリセット
      cards.forEach((card) => {
        card.classList.remove("animate-fade-in", "animate-fade-out");
      });

      // フェードアウトアニメーション
      container.style.opacity = "0.7";
      container.style.transform = "translateY(10px)";
      
      setTimeout(() => {
        if (view === "list") {
          container.classList.remove("grid", "md:grid-cols-2", "xl:grid-cols-3", "gap-6", "md:gap-8");
          container.classList.add("flex", "flex-col", "gap-6");
          cards.forEach((card) => card.classList.add("list-view"));
        } else {
          // grid
          container.classList.remove("flex", "flex-col", "gap-6");
          container.classList.add("grid", "md:grid-cols-2", "xl:grid-cols-3", "gap-6", "md:gap-8");
          cards.forEach((card) => card.classList.remove("list-view"));
        }

        // フェードインアニメーション
        requestAnimationFrame(() => {
          container.style.opacity = "1";
          container.style.transform = "translateY(0)";
        });
      }, 150);

      updateButtonStyles(view);
      localStorage.setItem("article_view_mode", view);
    };

    gridButton?.addEventListener("click", () => setView("grid"));
    listButton?.addEventListener("click", () => setView("list"));

    // On page load, apply the saved view mode
    const savedView = localStorage.getItem("article_view_mode");
    setView(savedView === "list" ? "list" : "grid");
  });
</script>
