---
// src/pages/search.astro
// このページを動的にレンダリングするようAstroに指示します
export const prerender = false;

import BaseLayout from "../layouts/BaseLayout.astro";
import Sidebar from "../components/Sidebar.astro";
import ArticleCard from "../components/ArticleCard.astro";
import { getBlogs } from "../lib/microcms";
import type { Blog } from "../lib/microcms";

// URLのクエリパラメータ
const query = Astro.url.searchParams.get("q");
const catParam = Astro.url.searchParams.get("cat") || "";

// microCMSの全文検索API(q)を使って記事を検索
// タイトル・本文・カテゴリ名すべてを対象に軽いフィルタリング
const { contents: all } = await getBlogs({ limit: 100, orders: "-publishedAt" });
const qRaw = (query || '').trim();
const q = qRaw.toLowerCase();
// 一意カテゴリ一覧
const categorySet = new Set<string>();
all.forEach((p: Blog) => (Array.isArray(p.category) ? p.category : []).forEach((c) => c && categorySet.add(String(c))));
const categoriesAll = Array.from(categorySet).sort((a,b)=>a.localeCompare(b,'ja'));

const posts = all.filter((p: Blog) => {
  const inTitle = p.title?.toLowerCase().includes(q);
  const inDesc = p.description?.toLowerCase().includes(q);
  const inContent = p.content?.toLowerCase().includes(q);
  const inCategoryText = Array.isArray(p.category) && p.category.some(c => String(c).toLowerCase().includes(q));
  // キーワード未指定時はテキスト一致は常にtrue（＝全件表示）
  let ok = !q || inTitle || inDesc || inContent || inCategoryText;
  if (!ok) return false;
  // カテゴリフィルタ
  if (catParam) {
    ok = Array.isArray(p.category) && p.category.includes(catParam);
    if (!ok) return false;
  }
  return true;
});

// 簡易ハイライト（XSS対策: キーワードのみ<mark>）
const escapeHtml = (s: string) => s
  .replace(/&/g, '&amp;')
  .replace(/</g, '&lt;')
  .replace(/>/g, '&gt;');

const mark = (text: string) => {
  if (!qRaw) return escapeHtml(text || '');
  const re = new RegExp(`(${qRaw.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'ig');
  return escapeHtml(text || '').replace(re, '<mark>$1</mark>');
};

// SEO用情報の準備
const pageTitle = query ? `「${query}」の検索結果` : "記事検索";
const pageDescription = query ? 
  `「${query}」に関する記事の検索結果です。${posts.length}件の記事が見つかりました。` :
  "ブログ記事を検索できます。キーワードを入力して関連する記事を見つけてください。";
const keywords = query ? `${query}, 検索, ブログ検索` : "検索, ブログ検索, 記事検索";
---

<BaseLayout
  pageTitle={pageTitle}
  pageDescription={pageDescription}
  keywords={keywords}
  noIndex={!query}
>
  <main class="min-h-screen bg-slate-900">
    <div class="container mx-auto px-4 py-8 md:py-12 max-w-6xl">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 md:gap-12">
      <div class="lg:col-span-2">
        <div class="mb-8">
          <h1 class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-white via-cyan-100 to-blue-100 bg-clip-text text-transparent mb-2">
            {query ? `「${query}」の検索結果` : "検索ページ"}
        </h1>
          <!-- Filter form -->
          <form class="mt-4 grid grid-cols-1 md:grid-cols-8 gap-3 items-end" method="get">
            <div class="md:col-span-5">
              <label for="q" class="block text-sm text-slate-300 mb-1">キーワード</label>
              <input id="q" name="q" list="search-suggestions" value={query || ''} placeholder="キーワードを入力" class="w-full px-3 py-2 rounded-lg bg-slate-800/70 border border-slate-600/60 text-slate-100 placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-cyan-400/50" />
              <datalist id="search-suggestions"></datalist>
            </div>
            <div class="md:col-span-3">
              <label for="cat" class="block text-sm text-slate-300 mb-1">カテゴリ</label>
              <select id="cat" name="cat" class="w-full px-3 py-2 rounded-lg bg-slate-800/70 border border-slate-600/60 text-slate-100 focus:outline-none focus:ring-2 focus:ring-cyan-400/50">
                <option value="" selected={!catParam}>すべて</option>
                {categoriesAll.map((c) => (
                  <option value={c} selected={c === catParam}>{c}</option>
                ))}
              </select>
            </div>
            <div class="md:col-span-8 flex gap-3">
              <button type="submit" class="px-4 py-2 rounded-lg bg-gradient-to-r from-cyan-500 to-blue-500 text-white font-semibold shadow hover:shadow-cyan-500/30">検索</button>
              <a href="/search" class="px-4 py-2 rounded-lg bg-slate-700/70 text-slate-100 border border-slate-600/60">クリア</a>
            </div>
          </form>
          {query && (
            <div class="flex items-center space-x-3">
              <div class="w-1.5 h-6 bg-gradient-to-b from-cyan-400 to-blue-500 rounded-full"></div>
              <span class="text-slate-300 text-lg font-medium">
                {posts.length}件の記事が見つかりました
              </span>
            </div>
          )}
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          {
                posts.length > 0
              ? posts.map((post: Blog) => (
                  <ArticleCard
                    id={post.id}
                    category={post.category}
                    title={post.title}
                    titleHtml={mark(post.title)}
                    description={post.description}
                    descriptionHtml={mark(post.description)}
                    date={
                      post.publishedAt
                        ? new Date(post.publishedAt).toLocaleDateString("ja-JP")
                        : ""
                    }
                        imageUrl={(post.eyecatch?.url || "/placeholder.svg") + "?w=400"}
                        showDescription={true}
                  />
                ))
                : (
                    <div class="col-span-full flex flex-col items-center justify-center py-16 px-6">
                      <div class="bg-gradient-to-b from-slate-800/90 to-slate-800/95 rounded-xl p-8 md:p-12 border border-slate-700/50 shadow-xl backdrop-blur-sm relative overflow-hidden max-w-md w-full text-center">
                        <!-- Background tech pattern -->
                        <div class="absolute inset-0 bg-tech-grid bg-tech-grid opacity-5 pointer-events-none"></div>
                        
                        <!-- Content with z-index -->
                        <div class="relative z-10">
                          <!-- Search icon -->
                          <div class="w-16 h-16 mx-auto mb-6 bg-gradient-to-r from-slate-700 to-slate-800 rounded-full flex items-center justify-center border border-slate-600/50">
                            <svg class="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                          </div>
                          
                          <!-- Message -->
                          <h3 class="text-xl font-bold text-slate-200 mb-3">
                            検索結果が見つかりません
                          </h3>
                          <p class="text-slate-400 mb-4 leading-relaxed">
                            「<span class="text-cyan-400 font-medium">{query}</span>」に一致する記事はありませんでした。
                  </p>
                          
                          <!-- Suggestions -->
                          <div class="text-sm text-slate-500 space-y-1">
                            <p>• 別のキーワードで検索してみてください</p>
                            <p>• スペルを確認してください</p>
                          </div>
                          
                          <!-- Decorative elements -->
                          <div class="absolute -top-2 -right-2 w-4 h-4 bg-cyan-400/20 rounded-full"></div>
                          <div class="absolute -bottom-2 -left-2 w-6 h-6 bg-blue-400/10 rounded-full"></div>
                        </div>
                      </div>
                    </div>
                )
          }
        </div>
      </div>
      <Sidebar />
    </div>
    </div>
  </main>
</BaseLayout>

<script is:inline>
  // 検索履歴（LocalStorage）: 'search_history' に最大20件保存
  (function(){
    const STORAGE_KEY = 'search_history';
    function getHistory(){
      try{ return JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]'); }catch{ return []; }
    }
    function setHistory(arr){
      try{ localStorage.setItem(STORAGE_KEY, JSON.stringify(arr.slice(0,20))); }catch{}
    }
    const form = document.querySelector('form[method="get"]');
    const input = document.getElementById('q');
    const datalist = document.getElementById('search-suggestions');
    const history = getHistory();
    if (datalist && Array.isArray(history)) {
      datalist.innerHTML = history.map((h)=>`<option value="${h}"></option>`).join('');
    }
    form?.addEventListener('submit', () => {
      const q = (input?.value || '').trim();
      if (!q) return;
      const h = getHistory();
      const next = [q, ...h.filter((x)=>x!==q)];
      setHistory(next);
    });
  })();
</script>
