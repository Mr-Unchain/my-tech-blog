// src/pages/api/sync/firebase-cleanup.ts
import type { APIRoute } from 'astro';
import { collection, getDocs, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../lib/firebase';
import { getBlogs } from '../../../lib/microcms';

// Firebase „ÅÆ views „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Çí microCMS „Å®ÂêåÊúü
export const POST: APIRoute = async ({ request }) => {
  try {
    // Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØÔºàÁ∞°ÊòìÁâàÔºâ
    const authHeader = request.headers.get('authorization');
    const secretKey = import.meta.env.SYNC_SECRET_KEY;
    
    if (secretKey && authHeader !== `Bearer ${secretKey}`) {
      return new Response(JSON.stringify({ 
        error: 'Unauthorized' 
      }), {
        status: 401,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    if (!db) {
      return new Response(JSON.stringify({ 
        error: 'Firebase not available' 
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    console.log('üîÑ Firebase „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂá¶ÁêÜÈñãÂßã');

    // 1. Firebase „ÅÆ views „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Åã„ÇâÂÖ®„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÂèñÂæó
    const viewsCollectionRef = collection(db, 'views');
    const viewsSnapshot = await getDocs(viewsCollectionRef);
    const firebaseArticleIds = viewsSnapshot.docs.map(doc => doc.id);
    
    console.log('üìä Firebase views „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥:', {
      total: firebaseArticleIds.length,
      ids: firebaseArticleIds
    });

    // 2. microCMS „Åã„ÇâÂÖ®Ë®ò‰∫ã„ÇíÂèñÂæó
    const { contents: microCMSArticles } = await getBlogs({
      limit: 100 // ÊúÄÂ§ß100‰ª∂
    });
    const microCMSArticleIds = microCMSArticles.map((article: any) => article.id);
    
    console.log('üìÑ microCMS Ë®ò‰∫ã:', {
      total: microCMSArticleIds.length,
      ids: microCMSArticleIds
    });

    // 3. Firebase „Å´„ÅÇ„Çã„Åå microCMS „Å´„Å™„ÅÑË®ò‰∫ãID „ÇíÁâπÂÆö
    const orphanedIds = firebaseArticleIds.filter(id => 
      !microCMSArticleIds.includes(id)
    );
    
    console.log('üóëÔ∏è ÂâäÈô§ÂØæË±°„ÅÆË®ò‰∫ãID:', orphanedIds);

    // 4. Â≠§Á´ã„Åó„Åü„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÂâäÈô§
    const deletionResults = [];
    for (const orphanedId of orphanedIds) {
      try {
        const docRef = doc(db, 'views', orphanedId);
        await deleteDoc(docRef);
        deletionResults.push({
          id: orphanedId,
          status: 'deleted',
          error: null
        });
        console.log(`‚úÖ ÂâäÈô§ÂÆå‰∫Ü: ${orphanedId}`);
      } catch (error) {
        deletionResults.push({
          id: orphanedId,
          status: 'error',
          error: error instanceof Error ? error.message : 'Unknown error'
        });
        console.error(`‚ùå ÂâäÈô§„Ç®„É©„Éº: ${orphanedId}`, error);
      }
    }

    const summary = {
      firebaseTotal: firebaseArticleIds.length,
      microCMSTotal: microCMSArticleIds.length,
      orphanedCount: orphanedIds.length,
      deletedCount: deletionResults.filter(r => r.status === 'deleted').length,
      errorCount: deletionResults.filter(r => r.status === 'error').length
    };

    console.log('üìà ÂêåÊúüÂÆå‰∫Ü:', summary);

    return new Response(JSON.stringify({
      success: true,
      message: 'Firebase cleanup completed',
      summary,
      deletionResults,
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå ÂêåÊúüÂá¶ÁêÜ„Ç®„É©„Éº:', error);
    
    return new Response(JSON.stringify({
      error: 'Sync process failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
};

// Âãï‰ΩúÁ¢∫Ë™çÁî®„ÅÆGET
export const GET: APIRoute = async () => {
  if (!db) {
    return new Response(JSON.stringify({ 
      message: 'Firebase Cleanup API',
      status: 'Firebase not connected'
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }

  try {
    // Á∞°Êòì„Çπ„ÉÜ„Éº„Çø„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
    const viewsCollectionRef = collection(db, 'views');
    const viewsSnapshot = await getDocs(viewsCollectionRef);
    
    const { contents: microCMSArticles } = await getBlogs({ limit: 10 });
    
    return new Response(JSON.stringify({
      message: 'Firebase Cleanup API',
      status: 'ready',
      firebase: {
        connected: true,
        viewsCount: viewsSnapshot.docs.length
      },
      microCMS: {
        connected: true,
        articlesCount: microCMSArticles.length
      },
      usage: {
        method: 'POST',
        auth: 'Bearer token required (SYNC_SECRET_KEY)',
        description: 'Synchronizes Firebase views collection with microCMS articles'
      }
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    return new Response(JSON.stringify({
      message: 'Firebase Cleanup API',
      status: 'error',
      error: error instanceof Error ? error.message : 'Unknown error'
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
};