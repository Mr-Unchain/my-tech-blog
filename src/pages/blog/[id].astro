---
// src/pages/blog/[id].astro
import { Image } from "astro:assets";
import CategoryList from "../../components/CategoryList";
import ArticleCard from "../../components/ArticleCard.astro";
import * as cheerio from "cheerio";
import { doc, increment, setDoc } from "firebase/firestore";
import Comments from "../../components/Comments.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import { db } from "../../lib/firebase";
import ReactionButtons from "../../components/ReactionButtons";
import { getBlogDetail, getBlogs } from "../../lib/microcms";
import { getRelatedPosts } from "../../utils/recommend";

const { id } = Astro.params;
const draftKey = Astro.url.searchParams.get("draftKey");

if (!id) {
  // idがない場合は404ページなどを表示
  return new Response(null, { status: 404 });
}

// 閲覧数をインクリメント（プレビュー時は抑止）
if (!draftKey) {
  const viewRef = doc(db, "views", id);
  await setDoc(viewRef, { count: increment(1) }, { merge: true });
}

const post = await getBlogDetail(id, draftKey ? { draftKey } : undefined);

if (!post) {
  // 記事が見つからない場合も404
  return new Response(null, { status: 404 });
}

// 目次を生成
let headings: { text: string; id: string; tagName: string }[] = [];
if (post.content) {
  const $ = cheerio.load(post.content);
  headings = $("h2, h3")
    .toArray()
    .map((node) => {
      const $el = $(node as any);
      const text = $el.text();
      const id = $el.attr('id') ?? '';
      const tagName = (node as any).name || (node as any).tagName || 'h2';
      return { text, id, tagName };
    });
}

// SEO用のキーワード生成（カテゴリとタグから）
const categories = Array.isArray(post.category) ? post.category : [post.category];
const categoryNames = categories.filter(Boolean); // categoryは文字列の配列

// 関連記事取得（同カテゴリ・自身除外・新しい順）
const allBlogs = await getBlogs({ limit: 100, orders: "-publishedAt" });
const relatedPosts = getRelatedPosts(post as any, allBlogs.contents as any[]);
const seoKeywords = [...categoryNames, "テクノロジー", "プログラミング", "コーディング", "AI", "開発"].join(", ");

// パンくずナビゲーション用のアイテム作成
const breadcrumbItems = [
  { name: "ホーム", href: "/" },
  { name: "ブログ", href: "/blog" },
  ...(categoryNames.length > 0 ? [{ name: categoryNames[0], href: `/category/${encodeURIComponent(categoryNames[0])}` }] : []),
  { name: post.title }
];
---

<BaseLayout
  pageTitle={post.title}
  pageDescription={post.description}
  ogImageUrl={post.eyecatch?.url}
  keywords={seoKeywords}
  author="Monologger"
  publishedTime={post.publishedAt}
  modifiedTime={post.updatedAt}
  articleType="article"
>
  <Fragment slot="head">
    {draftKey && (<meta name="robots" content="noindex,nofollow" />)}
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=arrow_circle_up,cached"
    />
    
    <!-- Article Specific Structured Data -->
    <script type="application/ld+json" is:inline>{JSON.stringify({
          "@context": "https://schema.org",
          "@type": "BlogPosting",
          "headline": post.title,
          "description": post.description,
          "image": post.eyecatch?.url || new URL("/placeholder.svg", Astro.site).href,
          "datePublished": post.publishedAt,
          "dateModified": post.updatedAt || post.publishedAt,
          "author": {
            "@type": "Person",
            "name": "Monologger",
            "url": new URL("/profile", Astro.site).href
          },
          "publisher": {
            "@type": "Organization",
            "name": "Monologger",
            "logo": {
              "@type": "ImageObject",
              "url": new URL("/logo.svg", Astro.site).href
            }
          },
          "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": Astro.url.href
          },
          "articleSection": categoryNames.join(", "),
          "keywords": seoKeywords,
          "wordCount": post.content ? post.content.replace(/<[^>]*>/g, '').length : 0,
          "inLanguage": "ja-JP",
          "potentialAction": {
            "@type": "ReadAction",
            "target": [Astro.url.href]
          }
    })}</script>

    <!-- Breadcrumb Structured Data -->
    <script type="application/ld+json" is:inline>{JSON.stringify({
          "@context": "https://schema.org",
          "@type": "BreadcrumbList",
          "itemListElement": [
            {
              "@type": "ListItem",
              "position": 1,
              "name": "ホーム",
              "item": Astro.site
            },
            {
              "@type": "ListItem",
              "position": 2,
              "name": "ブログ",
              "item": new URL("/blog", Astro.site).href
            },
            categoryNames.length > 0 ? {
              "@type": "ListItem",
              "position": 3,
              "name": categoryNames[0],
              "item": new URL(`/category/${encodeURIComponent(categoryNames[0])}`, Astro.site).href
            } : null,
            {
              "@type": "ListItem",
              "position": categoryNames.length > 0 ? 4 : 3,
              "name": post.title,
              "item": Astro.url.href
            }
          ].filter(Boolean)
    })}</script>
  </Fragment>
  
  <main class="min-h-screen bg-slate-900">
    <!-- 読書進捗バー -->
    <div class="reading-progress-container" aria-hidden="true">
      <div id="reading-progress" class="reading-progress-bar" />
    </div>
    <div
      class="container mx-auto px-4 py-12 md:py-16 max-w-6xl blog-global-font"
    >
      {draftKey && (
        <div class="mb-6 rounded-lg border border-yellow-500/40 bg-yellow-500/10 text-yellow-200 px-4 py-3 text-sm">
          プレビュー表示中（未公開の下書き）。このページは検索エンジンにインデックスされません。
        </div>
      )}
      <!-- パンくずナビゲーション -->
      <Breadcrumb items={breadcrumbItems} class="mb-6" />
      
      <div class="grid grid-cols-1 lg:grid-cols-4 lg:gap-12">
        <!-- メインコンテンツ -->
        <article class="lg:col-span-3" itemscope itemtype="https://schema.org/BlogPosting">
          <div
            class="bg-gradient-to-b from-slate-800/90 to-slate-800/95 rounded-xl border border-slate-700/50 shadow-xl backdrop-blur-sm overflow-hidden"
          >
            {
              post.eyecatch?.url ? (
                <div class="relative h-[300px] overflow-hidden rounded-lg shadow-lg mb-8">
                  <div
                    class="absolute inset-0 bg-cover bg-center"
                    style={`background-image: url(${post.eyecatch.url}?w=1200&blur=20&q=50);`}
                  />
                  <div class="absolute inset-0 bg-black/30" />
                  <Image
                    src={post.eyecatch.url}
                    width={1200}
                    height={630}
                    alt={`「${post.title}」のアイキャッチ画像`}
                    class="relative w-full h-full object-contain"
                  />
                  <header class="absolute bottom-0 left-0 right-0 p-8 bg-gradient-to-t from-black/60 to-transparent text-white">
                    <h1 class="text-3xl md:text-4xl font-bold mb-2">
                      {post.title}
                    </h1>
                    <div class="flex items-center justify-center flex-wrap gap-x-6 gap-y-2 text-sm text-slate-100">
                      <div class="flex items-center gap-2">
                        <span
                          class="material-symbols-outlined align-middle"
                          style="color: #bae6fd;"
                        >
                          arrow_circle_up
                        </span>
                        <time datetime={post.publishedAt}>
                          {new Date(post.publishedAt || "").toLocaleDateString(
                            "ja-JP"
                          )}
                        </time>
                      </div>
                      <div class="flex items-center gap-2">
                        <span
                          class="material-symbols-outlined align-middle"
                          style="color: #fbbf24;"
                        >
                          cached
                        </span>
                        <time datetime={post.updatedAt}>
                          {new Date(
                            post.updatedAt || post.publishedAt || ""
                          ).toLocaleDateString("ja-JP")}
                        </time>
                      </div>
                    </div>
                  </header>
                </div>
              ) : (
                <div class="relative h-[300px] overflow-hidden rounded-lg shadow-lg mb-8 bg-gray-100 flex items-center justify-center">
                  <Image
                    src="/placeholder.svg"
                    width={1200}
                    height={630}
                    alt="No image"
                    class="relative w-full h-full object-contain opacity-60"
                  />
                  <header class="absolute bottom-0 left-0 right-0 p-8 bg-gradient-to-t from-black/60 to-transparent text-white">
                    <h1 class="text-3xl md:text-4xl font-bold mb-2">
                      {post.title}
                    </h1>
                    <div class="flex items-center justify-center flex-wrap gap-x-6 gap-y-2 text-sm text-slate-500">
                      <div class="flex items-center gap-2">
                        <span
                          class="material-symbols-outlined align-middle"
                          style="color: #60a5fa;"
                        >
                          arrow_circle_up
                        </span>
                        <time datetime={post.publishedAt}>
                          {new Date(post.publishedAt || "").toLocaleDateString(
                            "ja-JP"
                          )}
                        </time>
                      </div>
                      {/* カテゴリ表示削除 */}
                    </div>
                  </header>
                </div>
              )
            }

            <!-- 目次（スマホ時も表示） -->
            <div class="block lg:hidden px-4 pb-4">
              <div
                class="bg-slate-700/60 p-4 rounded-xl border border-slate-600/50 shadow-sm backdrop-blur-sm"
              >
                <h3 class="font-bold text-lg mb-4 text-cyan-300">目次</h3>
                <ul class="toc-list">
                  {
                    headings.map((heading) => (
                      <li
                        class={heading.tagName === "h2" ? "toc-h2" : "toc-h3"}
                      >
                        <a href={`#${heading.id}`}>{heading.text}</a>
                      </li>
                    ))
                  }
                </ul>
              </div>
            </div>

            <!-- 本文 -->
            <div class="blog-article-content article-content">
              <Fragment set:html={post.content} />
            </div>

            <!-- リアクション + シェア -->
            <div class="mt-6 px-4 md:px-8">
              <div class="flex flex-col gap-4">
                {!draftKey && (
                  <div class="reaction-buttons">
                    <ReactionButtons client:load blogId={post.id} />
                  </div>
                )}

                <!-- Share buttons -->
                <div class="share-buttons-container">
                  <button id="share-x" class="share-btn twitter" type="button" aria-label="Xでシェア" title="Xでシェア">
                    <svg class="share-icon" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                      <path d="M18.9 2H22l-7.7 8.8L23.5 22H16l-5.2-6.8L4.8 22H2l8.3-9.5L.7 2h7l4.7 6.2L18.9 2z"/>
                    </svg>
                    <span class="share-label">Xでシェア</span>
                  </button>
                  <button id="share-linkedin" class="share-btn linkedin" type="button" aria-label="LinkedInでシェア" title="LinkedInでシェア">
                    <svg class="share-icon" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                      <path d="M19 3A2 2 0 0 1 21 5V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V5A2 2 0 0 1 5 3H19M8.34 17.34V10.5H6V17.34H8.34M7.17 9.41A1.41 1.41 0 1 0 7.17 6.59 1.41 1.41 0 0 0 7.17 9.41M18 17.34V13.61C18 11.5 16.88 10.41 15.19 10.41A3 3 0 0 0 12.88 11.65H12.84V10.5H10.5V17.34H12.88V13.98C12.88 13 13.06 12.08 14.22 12.08C15.36 12.08 15.38 13.12 15.38 14.04V17.34H18Z"/>
                    </svg>
                    <span class="share-label">LinkedIn</span>
                  </button>
                  <button id="share-copy" class="share-btn copy" type="button" aria-label="リンクをコピー" title="リンクをコピー">
                    <svg class="share-icon" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                      <path d="M19 21H8V7H19M19 3H7A2 2 0 0 0 5 5V19A2 2 0 0 0 7 21H19A2 2 0 0 0 21 19V5A2 2 0 0 0 19 3M3 17V3H17V1H3A2 2 0 0 0 1 3V17H3Z"/>
                    </svg>
                    <span class="share-label">コピー</span>
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* 記事末尾のカテゴリハッシュタグ表示（洗練デザイン） */}
          <div class="mt-8 flex flex-wrap gap-3">
            {
              Array.isArray(post.category)
                ? post.category.map((cat) => (
                    <a
                      href={`/category/${cat}/`}
                      class="inline-flex items-center px-3 py-1 rounded-full bg-gradient-to-r from-emerald-500/20 to-teal-500/20 text-emerald-300 text-xs font-semibold shadow-sm hover:from-emerald-500/30 hover:to-teal-500/30 hover:text-emerald-200 transition-all border border-emerald-400/30"
                      style="text-decoration: none;"
                    >
                      <svg
                        class="w-4 h-4 mr-1 text-emerald-400"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <text x="0" y="15" font-size="16">
                          #
                        </text>
                      </svg>
                      {cat}
                    </a>
                  ))
                : post.category && (
                    <a
                      href={`/category/${post.category}/`}
                      class="inline-flex items-center px-3 py-1 rounded-full bg-gradient-to-r from-emerald-500/20 to-teal-500/20 text-emerald-300 text-xs font-semibold shadow-sm hover:from-emerald-500/30 hover:to-teal-500/30 hover:text-emerald-200 transition-all border border-emerald-400/30"
                      style="text-decoration: none;"
                    >
                      <svg
                        class="w-4 h-4 mr-1 text-emerald-400"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <text x="0" y="15" font-size="16">
                          #
                        </text>
                      </svg>
                      {post.category}
                    </a>
                  )
            }
          </div>

          {!draftKey && (
            <div
              class="mt-8 bg-gradient-to-b from-slate-800/90 to-slate-800/95 p-6 md:p-10 rounded-xl border border-slate-700/50 shadow-xl backdrop-blur-sm"
            >
              <h2 class="text-2xl font-bold mb-6 text-cyan-300">コメント</h2>
              <Comments
                pageUrl={Astro.url.href}
                pageIdentifier={post.id}
                pageTitle={post.title}
              />
            </div>
          )}
        </article>

        <!-- サイドバー (目次) PCのみ -->
        <aside
          class="lg:col-span-1 lg:sticky lg:top-28 self-start hidden lg:block"
        >
          <div
            class="bg-slate-700/60 p-6 rounded-xl border border-slate-600/50 shadow-xl backdrop-blur-sm"
          >
            <h3 class="font-bold text-lg mb-4 text-cyan-300">目次</h3>
            <ul class="toc-list">
              {
                headings.map((heading) => (
                  <li class={heading.tagName === "h2" ? "toc-h2" : "toc-h3"}>
                    <a href={`#${heading.id}`}>{heading.text}</a>
                  </li>
                ))
              }
            </ul>
          </div>
        </aside>
      </div>

      <!-- Related Posts -->
      {relatedPosts.length > 0 && (
        <section class="mt-14">
          <h2 class="text-2xl font-bold mb-6 text-cyan-300">関連記事</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {relatedPosts.map((p: any) => (
              <ArticleCard
                id={p.id}
                title={p.title}
                description={p.description}
                date={new Date(p.publishedAt || p.createdAt).toLocaleDateString('ja-JP')}
                imageUrl={p.eyecatch?.url || '/placeholder.svg'}
                category={p.category}
                content={p.content}
                showReadingTime={true}
              />
            ))}
          </div>
        </section>
      )}
    </div>
  </main>
</BaseLayout>

<script is:inline>
  function setupShareButtons() {
    const pageUrl = window.location.href;
    const title = document.title || '';

    const xBtn = document.getElementById('share-x');
    const liBtn = document.getElementById('share-linkedin');
    const copyBtn = document.getElementById('share-copy');
    const canWebShare = typeof navigator !== 'undefined' && typeof navigator.share === 'function';

    if (xBtn) {
      xBtn.onclick = (e) => {
        e.preventDefault();
        if (canWebShare) {
          // 端末共有が使える場合でも、Xを明示的に開く仕様に固定
        }
        const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(pageUrl)}`;
        window.open(url, '_blank', 'noopener');
      };
    }

    if (liBtn) {
      liBtn.onclick = (e) => {
        e.preventDefault();
        const url = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(pageUrl)}`;
        window.open(url, '_blank', 'noopener');
      };
    }

    if (copyBtn) {
      copyBtn.onclick = async (e) => {
        e.preventDefault();
        if (canWebShare) {
          try {
            await navigator.share({ title, url: pageUrl });
            showShareToast('共有ダイアログを開きました');
            return;
          } catch(_) {}
        }
        try {
          if (navigator.clipboard && window.isSecureContext) {
            await navigator.clipboard.writeText(pageUrl);
          } else {
            const ta = document.createElement('textarea');
            ta.value = pageUrl;
            ta.style.position = 'fixed';
            ta.style.top = '-1000px';
            document.body.appendChild(ta);
            ta.focus();
            ta.select();
            document.execCommand('copy');
            document.body.removeChild(ta);
          }
          showShareToast('リンクをコピーしました');
          // show inline tooltip briefly
          copyBtn.classList.add('tip-show');
          setTimeout(() => copyBtn.classList.remove('tip-show'), 1200);
        } catch {
          showShareToast('コピーに失敗しました');
        }
      };
    }
  }

  function showShareToast(message) {
    const el = document.createElement('div');
    el.className = 'share-toast';
    el.textContent = message;
    document.body.appendChild(el);
    setTimeout(() => el.remove(), 2200);
  }

  document.addEventListener('DOMContentLoaded', setupShareButtons);
  document.addEventListener('astro:page-load', setupShareButtons);
</script>
