---
// src/components/HeroSlideshow.astro
import { Image } from "astro:assets";
import type { Blog } from "../lib/microcms";

export interface Props {
  posts: Pick<
    Blog,
    "id" | "title" | "description" | "category" | "eyecatch" | "publishedAt"
  >[];
}
const { posts } = Astro.props;
---

{/* スライドショー全体にIDを追加 */}
<section
  id="hero-slideshow"
  class="relative w-full h-96 md:h-[450px] mb-12 md:mb-16 rounded-xl overflow-hidden border border-slate-200 shadow-lg"
>
  <!-- Slides Container -->
  <div class="relative w-full h-full">
    {
      posts.map((post, index) => (
        <div
          class={`slide absolute w-full h-full transition-opacity duration-700 ease-in-out ${index === 0 ? "opacity-100" : "opacity-0"}`}
          data-slide-index={index}
        >
          {/* 背景画像 */}
          <Image
            src={post.eyecatch.url}
            alt=""
            width={1200}
            height={800}
            class="absolute inset-0 w-full h-full object-cover blur-md scale-110"
            aria-hidden="true"
          />
          <div class="absolute inset-0 bg-black/50"></div>

          {/* 前景画像 */}
          <Image
            src={post.eyecatch.url}
            alt={`「${post.title}」のアイキャッチ画像`}
            width={1200}
            height={800}
            class="relative w-full h-full object-contain drop-shadow-lg"
          />

          <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent" />
          <div
            class="absolute bottom-0 left-0 right-0 p-4 md:p-6 bg-custom-header/80 text-white"
          >
            <h2 class="text-xl md:text-2xl font-bold mb-1">{post.title}</h2>
            <p class="text-sm md:text-base hidden md:block">
              {post.description}
            </p>
          </div>
        </div>
      ))
    }
  </div>

  <!-- Navigation Buttons -->
  <button
    class="prev-btn absolute top-1/2 left-4 -translate-y-1/2 bg-black/30 hover:bg-black/50 p-3 rounded-full text-white transition-colors z-10"
  >
    &#10094;
  </button>
  <button
    class="next-btn absolute top-1/2 right-4 -translate-y-1/2 bg-black/30 hover:bg-black/50 p-3 rounded-full text-white transition-colors z-10"
  >
    &#10095;
  </button>

  <!-- Indicator Dots -->
  <div
    class="dots-container absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2 z-10"
  >
    {
      posts.map((_, index) => (
        <span
          class={`dot h-3 w-3 bg-white/50 rounded-full cursor-pointer transition-colors ${index === 0 ? "bg-white" : ""}`}
          data-dot-index={index}
        />
      ))
    }
  </div>
</section>

<script>
  document.addEventListener("astro:page-load", () => {
    const slideshow = document.getElementById("hero-slideshow");
    if (!slideshow) {
      // スライドショー要素が見つからない場合は何もしない
      return;
    }

    // 型を明記して要素を取得
    const slides = slideshow.querySelectorAll<HTMLElement>(".slide");
    const prevButton = slideshow.querySelector<HTMLButtonElement>(".prev-btn");
    const nextButton = slideshow.querySelector<HTMLButtonElement>(".next-btn");
    const dots = slideshow.querySelectorAll<HTMLElement>(".dot");

    // イベントリスナーが二重に登録されるのを防ぐためのフラグ
    if ((slideshow as any).dataset.initialized) {
      return;
    }
    (slideshow as any).dataset.initialized = "true";

    if (
      slides.length > 1 && // スライドが1枚以下の場合は操作不要
      prevButton &&
      nextButton &&
      dots.length > 0
    ) {
      let currentSlide = 0;
      let slideInterval: ReturnType<typeof setInterval> | undefined;

      const showSlide = (n: number) => {
        slides.forEach((slide, index) => {
          slide.classList.toggle("opacity-100", index === n);
          slide.classList.toggle("opacity-0", index !== n);
        });
        dots.forEach((dot, index) => {
          dot.classList.toggle("bg-white", index === n);
          dot.classList.toggle("bg-white/50", index !== n);
        });
        currentSlide = n;
      };

      const next = () => {
        showSlide((currentSlide + 1) % slides.length);
      };

      const prev = () => {
        showSlide((currentSlide - 1 + slides.length) % slides.length);
      };

      const resetInterval = () => {
        clearInterval(slideInterval);
        slideInterval = setInterval(next, 5000); // 5秒ごとにスライド
      };

      prevButton.addEventListener("click", () => {
        prev();
        resetInterval();
      });

      nextButton.addEventListener("click", () => {
        next();
        resetInterval();
      });

      dots.forEach((dot) => {
        dot.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;
          const dotIndex = target.dataset.dotIndex;
          if (dotIndex) {
            showSlide(parseInt(dotIndex, 10));
            resetInterval();
          }
        });
      });

      // 初期化
      showSlide(0);
      resetInterval();

      // ページ遷移時にタイマーをクリアし、初期化フラグをリセット
      document.addEventListener(
        "astro:before-swap",
        () => {
          clearInterval(slideInterval);
          delete (slideshow as any).dataset.initialized;
        },
        { once: true }
      );
    }
  });
</script>
