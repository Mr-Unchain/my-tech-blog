---
// src/components/LikeButton.astro
import { db } from "../lib/firebase";
import { doc, getDoc, onSnapshot } from "firebase/firestore";

export interface Props {
  postId: string;
}
const { postId } = Astro.props;
---

<div id={`like-container-${postId}`} class="like-button-container" data-post-id={postId}>
  <button
    id={`like-button-${postId}`}
    class="like-button like-button--unliked"
    aria-label="いいねボタン"
  >
    <svg
      id={`like-icon-${postId}`}
      class="like-button__icon like-button__icon--unliked"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4.318 6.318a4.5 4.5 0 016.364 0L12 7.636l1.318-1.318a4.5 4.5 0 016.364 6.364L12 20.364l-7.682-7.682a4.5 4.5 0 010-6.364z"
      ></path>
    </svg>
  </button>
  <span id={`like-count-${postId}`} class="like-count">0</span>
</div>

<script>
  import { auth, db } from "../lib/firebase";
  import { signInAnonymously, onAuthStateChanged } from "firebase/auth";
  import {
    doc,
    getDoc,
    runTransaction,
    type DocumentReference,
    onSnapshot,
    increment,
  } from "firebase/firestore";

  document.addEventListener("astro:page-load", () => {
    const likeContainers = document.querySelectorAll<HTMLElement>(".like-button-container");
    if (!likeContainers) return;

    likeContainers.forEach(container => {
      const postId = container.dataset.postId;
      if (!postId) return;

      const button = container.querySelector<HTMLButtonElement>(`#like-button-${postId}`);
      const icon = container.querySelector<SVGElement>(`#like-icon-${postId}`);
      const countSpan = container.querySelector<HTMLSpanElement>(`#like-count-${postId}`);

      if (!button || !icon || !countSpan) return;

      const updateButtonState = (liked: boolean, count: number) => {
        countSpan.textContent = count.toString();
        if (liked) {
          button.classList.add("like-button--liked");
          button.classList.remove("like-button--unliked");
          icon.classList.add("like-button__icon--liked");
          icon.classList.remove("like-button__icon--unliked");
          icon.setAttribute("fill", "currentColor");
        } else {
          button.classList.remove("like-button--liked");
          button.classList.add("like-button--unliked");
          icon.classList.remove("like-button__icon--liked");
          icon.classList.add("like-button__icon--unliked");
          icon.setAttribute("fill", "none");
        }
      };

      onAuthStateChanged(auth, (user) => {
        if (!user) {
          signInAnonymously(auth);
          return;
        }

        const likesRef = doc(db, "users", user.uid, "likes", postId);
        const postRef = doc(db, "posts", postId);

        getDoc(likesRef).then(docSnap => {
          if (docSnap.exists()) {
            updateButtonState(true, 0); // カウントは後で更新
          }
        });

        onSnapshot(doc(db, "posts", postId), (doc) => {
          const count = doc.data()?.likes ?? 0;
          getDoc(likesRef).then(docSnap => {
            updateButtonState(docSnap.exists(), count);
          });
        });

        button.addEventListener("click", async () => {
          await runTransaction(db, async (transaction) => {
            const likeDoc = await transaction.get(likesRef);
            if (likeDoc.exists()) {
              transaction.delete(likesRef);
              transaction.update(postRef, { likes: increment(-1) });
            } else {
              transaction.set(likesRef, { likedAt: new Date() });
              transaction.update(postRef, { likes: increment(1) });
            }
          });
        });
      });
    });
  });
</script>
