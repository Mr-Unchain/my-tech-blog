---
// src/components/Sidebar.astro
import { collection, getDocs, limit, orderBy, query } from "firebase/firestore";
import { db } from "../lib/firebase";
import { getBlogs, getProfile, type Blog } from "../lib/microcms";

// プロフィール情報を取得
const profile = await getProfile();

// 人気記事の取得ロジック (変更なし)
const viewsQuery = query(
  collection(db, "views"),
  orderBy("count", "desc"),
  limit(5)
);
const querySnapshot = await getDocs(viewsQuery);
const popularPostIds = querySnapshot.docs.map((doc) => doc.id);

let popularPosts: Pick<Blog, "id" | "title">[] = [];
if (popularPostIds.length > 0) {
  const filters = popularPostIds.map((id) => `id[equals]${id}`).join("[or]");
  const { contents: microCMSData } = await getBlogs({
    filters: filters,
    fields: "id,title",
  });
  popularPosts = popularPostIds
    .map((id) => microCMSData.find((post: { id: string }) => post.id === id))
    .filter((post): post is Blog => !!post);
}

// ★★★ カテゴリーの取得と記事数のカウントロジックを追加 ★★★
const { contents: postsForCategories } = await getBlogs({
  fields: "id,category",
});
const allCategories: string[] = postsForCategories.flatMap(
  (post: { category: string | string[] }) =>
    Array.isArray(post.category) ? post.category : [post.category]
);

// 各カテゴリーの記事数をカウント
const categoryCounts: Record<string, number> = allCategories.reduce(
  (acc: Record<string, number>, category: string) => {
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  },
  {} as Record<string, number>
);

// 重複を除いたカテゴリ名のリスト
const uniqueCategories = [...new Set(allCategories)];
---

<aside class="space-y-8">
  {/* プロフィール */}
  <div class="bg-custom-text-bg p-6 rounded-lg shadow">
    {
      profile.avatar && (
        <a href="/profile/">
          <img
            class="w-24 h-24 rounded-full mx-auto mb-4 ring-4 ring-white hover:ring-blue-300 transition-all"
            src={profile.avatar.url}
            alt="筆者のアバター"
          />
        </a>
      )
    }
    <h3 class="font-bold text-lg text-slate-900">{profile.name}</h3>
    <p class="text-sm text-slate-600 mb-4">
      {profile.description}
    </p>
    <div class="flex justify-center space-x-5 mt-5">
      {
        profile.xUrl && (
          <a
            href={profile.xUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="text-slate-500 hover:text-blue-500 transition-colors"
            aria-label="Xのプロフィールを見る"
          >
            <svg
              class="w-6 h-6"
              viewBox="0 0 24 24"
              fill="currentColor"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
            </svg>
          </a>
        )
      }
      {
        profile.githubUrl && (
          <a
            href={profile.githubUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="text-slate-500 hover:text-blue-500 transition-colors"
            aria-label="GitHubのプロフィールを見る"
          >
            <svg
              class="w-6 h-6"
              viewBox="0 0 24 24"
              fill="currentColor"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M12 2C6.477 2 2 6.477 2 12c0 4.418 2.865 8.168 6.839 9.492.5.092.682-.217.682-.482 0-.237-.009-.868-.014-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.031-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.378.203 2.398.1 2.651.64.7 1.03 1.595 1.03 2.688 0 3.848-2.338 4.695-4.566 4.942.359.308.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.001 10.001 0 0022 12c0-5.523-4.477-10-10-10z"
              />
            </svg>
          </a>
        )
      }
    </div>
  </div>

  {/* 検索 (変更なし) */}
  <div class="bg-custom-text-bg p-6 rounded-lg shadow">
    <h3 class="font-bold text-lg mb-4 text-custom-heading">記事を探す</h3>
    <form action="/search" method="get" class="flex">
      <input
        type="search"
        name="q"
        placeholder="キーワード..."
        class="border border-slate-300 rounded-l-md px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-custom-button"
      />
      <button
        type="submit"
        class="bg-custom-button text-black font-bold px-4 py-2 rounded-r-md hover:bg-yellow-400 transition-colors"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          class="w-5 h-5"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </button>
    </form>
  </div>

  {/* 人気記事リスト (変更なし) */}
  <div class="bg-custom-text-bg p-6 rounded-lg shadow">
    <h3 class="font-bold text-lg mb-4 text-custom-heading">人気記事</h3>
    {
      popularPosts.length > 0 ? (
        <ol class="space-y-3">
          {popularPosts.map(
            (post, index) =>
              post && (
                <li class="flex items-center">
                  <span class="text-slate-500 font-bold text-lg mr-3">
                    {index + 1}.
                  </span>
                  <a
                    href={`/blog/${post.id}/`}
                    class="text-slate-700 hover:text-blue-500 hover:underline transition-colors"
                  >
                    {post.title}
                  </a>
                </li>
              )
          )}
        </ol>
      ) : (
        <p class="text-sm text-slate-500">人気記事はまだありません。</p>
      )
    }
  </div>

  {/* ★★★ カテゴリーリストを記事数表示に対応 ★★★ */}
  <div class="bg-custom-text-bg p-6 rounded-lg shadow">
    <h3 class="font-bold text-lg mb-4 text-custom-heading">カテゴリ</h3>
    <ul class="space-y-1">
      {
        uniqueCategories.map((category) => (
          <li>
            <a
              href={`/category/${category}/`}
              class="group flex justify-between items-center p-2 rounded-md hover:bg-slate-100 transition-colors"
            >
              <span class="text-slate-700 group-hover:text-blue-500 transition-colors">
                {category}
              </span>
              <span class="text-xs bg-slate-200 text-slate-600 font-medium px-2 py-1 rounded-full group-hover:bg-blue-100 group-hover:text-blue-600 transition-colors">
                {categoryCounts[category]}
              </span>
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</aside>
