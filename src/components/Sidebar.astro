---
// src/components/Sidebar.astro
import { collection, getDocs, limit, orderBy, query } from "firebase/firestore";
import { db } from "../lib/firebase";
import { getBlogs, getProfile, type Blog } from "../lib/microcms";

// プロフィール情報を取得
const profile = await getProfile();

// 人気記事の取得ロジック (変更なし)
const viewsQuery = query(
  collection(db, "views"),
  orderBy("count", "desc"),
  limit(5)
);
const querySnapshot = await getDocs(viewsQuery);
const popularPostIds = querySnapshot.docs.map((doc) => doc.id);

let popularPosts: Pick<Blog, "id" | "title">[] = [];
if (popularPostIds.length > 0) {
  const filters = popularPostIds.map((id) => `id[equals]${id}`).join("[or]");
  const { contents: microCMSData } = await getBlogs({
    filters: filters,
    fields: "id,title",
  });
  popularPosts = popularPostIds
    .map((id) => microCMSData.find((post) => post.id === id))
    .filter((post): post is Blog => !!post);
}

// ★★★ カテゴリーの取得と記事数のカウントロジックを追加 ★★★
const { contents: postsForCategories } = await getBlogs({
  fields: "id,category",
});
const allCategories = postsForCategories.flatMap((post) => post.category);

// 各カテゴリーの記事数をカウント
const categoryCounts: Record<string, number> = allCategories.reduce(
  (acc, category) => {
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  },
  {} as Record<string, number>
);

// 重複を除いたカテゴリ名のリスト
const uniqueCategories = [...new Set(allCategories)];
---

<aside class="space-y-8">
  {/* プロフィール */}
  <div class="bg-slate-800 p-6 rounded-xl border border-slate-700 text-center">
    {
      profile.avatar && (
        <a href="/profile/">
          <img
            class="w-24 h-24 rounded-full mx-auto mb-4 ring-4 ring-slate-700"
            src={profile.avatar.url}
            alt="筆者のアバター"
          />
        </a>
      )
    }
    <h3 class="font-bold text-lg text-slate-100">{profile.name}</h3>
    <p class="text-sm text-slate-400 mt-2">{profile.description}</p>
    <div class="flex justify-center space-x-4 mt-4">
      {
        profile.xUrl && (
          <a
            href={profile.xUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="text-slate-400 hover:text-blue-400 transition-colors"
          >
            X
          </a>
        )
      }
      {
        profile.githubUrl && (
          <a
            href={profile.githubUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="text-slate-400 hover:text-blue-400 transition-colors"
          >
            GitHub
          </a>
        )
      }
    </div>
  </div>

  {/* 検索 (変更なし) */}
  <div class="bg-slate-800 p-6 rounded-xl border border-slate-700">
    <h3 class="font-bold text-lg mb-4 text-slate-100">記事を探す</h3>
    <form class="flex" action="/search" method="GET">
      <input
        type="text"
        name="q"
        placeholder="キーワード..."
        class="w-full bg-slate-900 border border-slate-600 text-slate-100 placeholder-slate-500 rounded-l-lg focus:ring-blue-500 focus:border-blue-500"
      />
      <button
        type="submit"
        class="bg-blue-600 text-white px-4 rounded-r-lg hover:bg-blue-500 transition-colors"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg
        >
      </button>
    </form>
  </div>

  {/* 人気記事リスト (変更なし) */}
  <div class="bg-slate-800 p-6 rounded-xl border border-slate-700">
    <h3 class="font-bold text-lg mb-4 text-slate-100">人気記事</h3>
    {
      popularPosts.length > 0 ? (
        <ol class="space-y-3">
          {popularPosts.map(
            (post, index) =>
              post && (
                <li class="flex items-center">
                  <span class="text-slate-500 font-bold text-lg mr-3">
                    {index + 1}.
                  </span>
                  <a
                    href={`/blog/${post.id}/`}
                    class="text-slate-300 hover:text-blue-400 hover:underline transition-colors"
                  >
                    {post.title}
                  </a>
                </li>
              )
          )}
        </ol>
      ) : (
        <p class="text-sm text-slate-500">人気記事はまだありません。</p>
      )
    }
  </div>

  {/* ★★★ カテゴリーリストを記事数表示に対応 ★★★ */}
  <div class="bg-slate-800 p-6 rounded-xl border border-slate-700">
    <h3 class="font-bold text-lg mb-4 text-slate-100">カテゴリ</h3>
    <ul class="space-y-2">
      {
        uniqueCategories.map((category) => (
          <li class="flex justify-between items-center">
            <a
              href={`/category/${category}/`}
              class="text-slate-300 hover:text-blue-400 hover:underline transition-colors"
            >
              {category}
            </a>
            <span class="text-xs bg-slate-700 text-slate-400 font-medium px-2 py-1 rounded-full">
              {categoryCounts[category]}
            </span>
          </li>
        ))
      }
    </ul>
  </div>
</aside>
