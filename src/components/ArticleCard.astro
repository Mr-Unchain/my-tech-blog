---
// src/components/ArticleCard.astro
type ColorKey = "sky" | "purple" | "pink" | "slate";
export interface Props {
  id: string;
  category: string | string[];
  title: string;
  description: string;
  date: string;
  imageUrl: string;
  categoryColor: ColorKey | ColorKey[];
}
const { id, category, title, description, date, imageUrl, categoryColor } =
  Astro.props;
const colorMap: Record<ColorKey, string> = {
  sky: "text-sky-400 bg-sky-900/50 border-sky-400/30",
  purple: "text-purple-400 bg-purple-900/50 border-purple-400/30",
  pink: "text-pink-400 bg-pink-900/50 border-pink-400/30",
  slate: "text-slate-400 bg-slate-700/50 border-slate-400/30",
};
// 配列で受け取るように変換
const categories = Array.isArray(category) ? category : [category];
const categoryColors = Array.isArray(categoryColor)
  ? categoryColor
  : [categoryColor];
---

<a
  href={`/blog/${id}/`}
  class="group block rounded-xl overflow-hidden bg-slate-800 border border-slate-700 transition-all duration-300 hover:border-blue-500/50 hover:-translate-y-1 hover:shadow-2xl hover:shadow-slate-900/60"
>
  <article class="h-full md:flex">
    <div class="md:w-1/3">
      <img
        class="h-48 w-full object-cover md:h-full transition-transform duration-300 group-hover:scale-105"
        src={imageUrl}
        alt={`「${title}」の記事の画像`}
      />
    </div>
    <div class="p-6 md:w-2/3 flex flex-col">
      <div class="flex gap-2 mb-3">
        {
          categories.map((cat, idx) => (
            <span
              class={`text-xs font-bold py-1 px-3 rounded-full self-start ${colorMap[categoryColors[idx] ?? categoryColors[0]]}`}
            >
              {cat}
            </span>
          ))
        }
      </div>
      <h3 class="font-bold text-xl text-slate-50 leading-tight group-hover:text-blue-400 transition-colors duration-300">
        {title}
      </h3>
      <p class="text-slate-400 text-sm mt-3 mb-4 flex-grow">{description}</p>
      <time class="text-xs text-slate-500 mt-auto">{date}</time>
    </div>
  </article>
</a>
